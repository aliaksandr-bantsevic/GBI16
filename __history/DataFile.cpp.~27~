//---------------------------------------------------------------------------

#pragma hdrstop

#include "DataFile.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)


TDataFile::TDataFile()
{
	file = NULL;
	cbuf_idx = 0;
	memset(cbuf,0,1024);
	str_idx = 0;
	memset(str,0,1024);
}

TDataFile::~TDataFile()
{

}

int TDataFile::OpenFile(TCHAR* tdir)
{
	int res = 0;

	if ((file = _wfopen(tdir,L"rb")) == NULL) res = -1; //file not opened

	return res;
}

int TDataFile::CheckFile(void)
{

	if (file == NULL) return -1; //file not opened

	//check utf8 ebom signature
	char sign [] = {0xef, 0xbb, 0xbf};
	char sdata [3];

	if (!fread(sdata,3,1,file)) return -2; //file read fail

	for (int i = 0; i < 3; i++)
	{
		if (sign[i] != sdata[i]) return -3; //wrong file signature
	}

	//check file format (header string)  [Объект; Место; Дата; Направление; Позиция; X; Y;]
	char head [] = "Объект; Место; Дата; Направление; Позиция; X; Y;\r\n";

	GetStr();

	for (int i = 0; i < strlen(head); i++)
	{
		if (head[i] != cbuf[i]) return -4; //wrong header string
	}

	return 0;
}

int TDataFile::GetStr(void)
{
    int res = -1;
	cbuf_idx = 0;
	tbuf_idx = 0;
	tword_idx = 0;
	pars_pos = w_undef;
	tbuf_pars_idx = 0;
	pars_str_res = 0;

	memset(cbuf,0,1024);
	memset(tbuf,0,sizeof(tbuf));
	memset(tword,0,sizeof(tword));

	char c;

	while (fread(&c,1,1,file))
	{
		cbuf[cbuf_idx++] = c;

		if ((cbuf[cbuf_idx-2] == '\r') && (cbuf[cbuf_idx-1] == '\n'))
		{
			res = 0;
			break;
		}
   }


   memset(tbuf,0,sizeof(tbuf));
   tbuf_idx = 0;

   ConvertStrUTF8ToUtf16 (cbuf, tbuf, cbuf_idx);

   tbuf_idx = wcslen(tbuf);

   return res;
}

void TDataFile::Close(void)
{
	fclose(file);
	cbuf_idx = 0;
	memset(cbuf,0,1024);
	str_idx = 0;
	memset(str,0,1024);
}

int TDataFile::GetWord(void)
{

   TCHAR tsym = 0;
   bool wcor = false;

   memset(tword,0,sizeof(tword));
   tword_idx = 0;

   while (tbuf_pars_idx<tbuf_idx)
   {
	  tsym =tbuf [tbuf_pars_idx++];

	  if (tsym == (TCHAR)';')
	  {
		  wcor = true;
		  break;
	  }
	  else
	  {
		  tword [tword_idx++] = tsym;
      }
   }

   if (wcor == true)
   {
		 pars_pos++;

		 if (pars_pos == 1)
		 {
			 pars_str_res += GetSpar();
			 data_file_record.place = s_par;
		 }

		 if (pars_pos == 2)
		 {
			 pars_str_res += GetSpar();
			 data_file_record.drill = s_par;
		 }

		 if (pars_pos == 3)
		 {
			 pars_str_res += GetTpar();
             data_file_record.t = s_par;
		 }

		 if (pars_pos == 4)
		 {
			 pars_str_res += GetSpar();
		 }

		 if (pars_pos == 5)
		 {
			 pars_str_res += GetDpar();
		 }

		 if (pars_pos == 6)
		 {
			 pars_str_res += GetDpar();
		 }

		 if (pars_pos == 7)
		 {
			 pars_str_res += GetDpar();

			 if (pars_str_res == 0)
			 {

			 }
			 else
			 {

             }
		 }

   }
   else
   {
	   return -1; //str pars problem
   }

   return 0;
}

 int TDataFile::GetSpar(void)
 {

	TCHAR tc[1024];
	memset(tc,0,1024);

	int j = 0;

	//remove spaces
	for (int i = 0; i < wcslen(tword); i++)
	{
		if (tword[i] != ' ')
		{
		   tc [j++] = tword [i];
		}
	}

	s_par = tc;
	return 0;
 }

 int TDataFile::GetTpar(void)
 {

	TFormatSettings FS;
	FS.DateSeparator = '.';
	FS.ShortDateFormat = "dd.mm.yyyy";
	FS.LongTimeFormat = "hh:nn:ss";
	FS.TimeSeparator = ':';

	try
	{
		t_par = StrToDateTime((UnicodeString)tword, FS);
	}
	catch(...)
	{
		return -1; //bad date_time format
	}

	return 0;
}

int TDataFile::GetDpar(void)
 {

	TCHAR tc[1024];
	memset(tc,0,1024);

	int j = 0;

	//filter digit symbols
	for (int i = 0; i < wcslen(tword); i++)
	{
		if (
			(tword[i] == '0')||(tword[i] == '1')||(tword[i] == '2')||
			(tword[i] == '3')||(tword[i] == '4')||(tword[i] == '5')||
			(tword[i] == '6')||(tword[i] == '7')||(tword[i] == '8')||
			(tword[i] == '9')||(tword[i] == '.')
		)
		{
		   tc [j++] = tword [i];
		}
	}

	WideString ws;
	ws = tc;

	try
	{
		d_par = ws.ToDouble();
	}
	catch (...)
	{
		return -1;
	}

	return 0;
}
